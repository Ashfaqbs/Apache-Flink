version: '3.8'

services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "my-topic:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  postgres:
    image: postgres:latest
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: mainschema
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  jobmanager:
#    image: flink:1.19.0-scala_2.12
    image: apache/flink:1.19.2-java17
    depends_on:
      - kafka
      - postgres
    ports:
      - "8081:8081"
      - "8083:8083"  
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=admin123
    volumes:
      - ./jars:/opt/flink/custom-lib

  taskmanager:
#    image: flink:1.19.0-scala_2.12
    image: apache/flink:1.19.2-java17
    depends_on:
      - jobmanager
    command: taskmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=admin123
    volumes:
      - ./jars:/opt/flink/custom-lib
    deploy:
      replicas: 2  
  mongo:
    image: mongo:latest
    container_name: docker-mongo-1
    ports:
      - "27017:27017"
    volumes:
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
  
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=adminpassword
    depends_on:
      - postgres
      
  minio:
    image: quay.io/minio/minio
    container_name: minio
    ports:
      - "9000:9000"    # S3 API
      - "9001:9001"    # MinIO Console (web UI)
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: admin123
    volumes:
      - ./minio-data:/data  # a bucket is created automatically but file not be added we need to add via code or manually CSV here
    user: "1000:197609" # UID:GID, using 1000 for UID (common default) and 197609 for GID ( id -g) nw
    command: server /data --console-address ":9001"

  
